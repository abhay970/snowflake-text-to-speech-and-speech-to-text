--!jinja
USE ROLE ACCOUNTADMIN;

-- Create a new role
CREATE OR REPLACE ROLE AUDIO_INTERFACING_ROLE;

-- Create image repository (used for service containers)
CREATE OR REPLACE IMAGE REPOSITORY IMAGE_REPO_SERVICES;

-- Create compute pool for GPU services
CREATE COMPUTE POOL IF NOT EXISTS AUDIO_INTERFACE_GPU_POOL
  MIN_NODES = 1
  MAX_NODES = 3
  INSTANCE_FAMILY = GPU_NV_S;

-- Create External Access Integration
CREATE OR REPLACE NETWORK RULE hf_network_rule
  MODE = EGRESS
  TYPE = HOST_PORT
  VALUE_LIST = ('huggingface.co', 'cdn-lfs.huggingface.co','cdn-lfs-us-1.hf.co','cdn-lfs.hf.co');

CREATE OR REPLACE NETWORK RULE pypi_network_rule
  MODE = EGRESS
  TYPE = HOST_PORT
  VALUE_LIST = ('pypi.org', 'pypi.python.org', 'pythonhosted.org',  'files.pythonhosted.org');

CREATE OR REPLACE EXTERNAL ACCESS INTEGRATION hf_pypi_access_integration
  ALLOWED_NETWORK_RULES = (hf_network_rule, pypi_network_rule)
  ENABLED = true;

-- Grant privileges
GRANT ALL ON WAREHOUSE AUDIO_INTERFACE_WH TO ROLE AUDIO_INTERFACING_ROLE;
GRANT ALL ON DATABASE AUDIO_INTERFACING_DEMO TO ROLE AUDIO_INTERFACING_ROLE;
GRANT ALL ON SCHEMA AUDIO_INTERFACING_DEMO.PUBLIC TO ROLE AUDIO_INTERFACING_ROLE;
GRANT READ ON IMAGE REPOSITORY IMAGE_REPO_SERVICES TO ROLE AUDIO_INTERFACING_ROLE;
GRANT WRITE ON IMAGE REPOSITORY IMAGE_REPO_SERVICES TO ROLE AUDIO_INTERFACING_ROLE;
GRANT SERVICE READ ON IMAGE REPOSITORY IMAGE_REPO_SERVICES TO ROLE AUDIO_INTERFACING_ROLE;
GRANT SERVICE WRITE ON IMAGE REPOSITORY IMAGE_REPO_SERVICES TO ROLE AUDIO_INTERFACING_ROLE;
GRANT BIND SERVICE ENDPOINT ON ACCOUNT TO ROLE AUDIO_INTERFACING_ROLE;
GRANT ALL ON COMPUTE POOL AUDIO_INTERFACE_GPU_POOL TO ROLE AUDIO_INTERFACING_ROLE;
GRANT ALL ON INTEGRATION hf_pypi_access_integration TO ROLE AUDIO_INTERFACING_ROLE;

-- Grant role to user
GRANT ROLE AUDIO_INTERFACING_ROLE TO USER {{USER}};

-- Switch role
USE ROLE AUDIO_INTERFACING_ROLE;
USE SCHEMA AUDIO_INTERFACING_DEMO.PUBLIC;

-- Create the notebooks
CREATE NOTEBOOK TEXT_TO_SPEECH_NOTEBOOK
  FROM @AUDIO_INTERFACING_DEMO.PUBLIC.GITHUB_REPO_AUDIO_INTERFACES/branches/main/notebooks
    WAREHOUSE = 'AUDIO_INTERFACE_WH' 
    QUERY_WAREHOUSE = 'AUDIO_INTERFACE_WH' 
    RUNTIME_NAME = 'SYSTEM$GPU_RUNTIME' 
    COMPUTE_POOL = 'SYSTEM_COMPUTE_POOL_GPU'
    EXTERNAL_ACCESS_INTEGRATIONS = ( 'HF_PYPI_ACCESS_INTEGRATION' )
    MAIN_FILE = 'TEXT_TO_SPEECH_NOTEBOOK.ipynb';

CREATE NOTEBOOK SPEECH_TO_TEXT_NOTEBOOK
  FROM @AUDIO_INTERFACING_DEMO.PUBLIC.GITHUB_REPO_AUDIO_INTERFACES/branches/main/notebooks
    WAREHOUSE = 'AUDIO_INTERFACE_WH' 
    QUERY_WAREHOUSE = 'AUDIO_INTERFACE_WH' 
    RUNTIME_NAME = 'SYSTEM$GPU_RUNTIME' 
    COMPUTE_POOL = 'SYSTEM_COMPUTE_POOL_GPU' 
    PERSISTENT_VOLUME_SIZE = '0' 
    EXTERNAL_ACCESS_INTEGRATIONS = ( 'HF_PYPI_ACCESS_INTEGRATION' )
    MAIN_FILE = 'SPEECH_TO_TEXT_NOTEBOOK.ipynb';

CREATE STREAMLIT AUDIO_INTERFACES_APP
  FROM @AUDIO_INTERFACING_DEMO.PUBLIC.GITHUB_REPO_AUDIO_INTERFACES/branches/main/streamlit_app/
  MAIN_FILE = 'üè†_Home.py'
  QUERY_WAREHOUSE = AUDIO_INTERFACE_WH
  EXTERNAL_ACCESS_INTEGRATIONS = ( 'HF_PYPI_ACCESS_INTEGRATION' )
  TITLE = 'Speech-to-Text and Text-to-Speech models in Snowflake'
  COMMENT = 'Demo Streamlit frontend for Text-to-Speech and Speech-to-Text models.';

-- Whether to execute the notebook or not during initial demo setup
{% if EXECUTE_NOTEBOOKS %}
    EXECUTE NOTEBOOK TEXT_TO_SPEECH_NOTEBOOK();
    EXECUTE NOTEBOOK SPEECH_TO_TEXT_NOTEBOOK();
{%- endif -%}